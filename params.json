{"name":"Landish/Pagination","tagline":"Laravel 5 Custom Pagination Presenter","body":"# Landish/Pagination\r\n\r\n[![Build Status](https://travis-ci.org/Landish/Pagination.svg?branch=master)](https://travis-ci.org/Landish/Pagination)\r\n[![Latest Stable Version](https://poser.pugx.org/landish/pagination/v/stable)](https://packagist.org/packages/landish/pagination) \r\n[![Total Downloads](https://poser.pugx.org/landish/pagination/downloads)](https://packagist.org/packages/landish/pagination) \r\n[![Latest Unstable Version](https://poser.pugx.org/landish/pagination/v/unstable)](https://packagist.org/packages/landish/pagination) \r\n[![License](https://poser.pugx.org/landish/pagination/license)](https://packagist.org/packages/landish/pagination)\r\n\r\n[Laravel 5](http://laravel.com/) comes with [Pagination](http://laravel.com/docs/5.0/pagination) class, which is perfectly rendered to match [Bootstrap 3](http://getbootstrap.com/components/#pagination) styles. \r\n\r\nThis package gives you ability to change the display output of rendered pagination elements for Front-end Frameworks, such as: [Semantic UI](http://semantic-ui.com/collections/menu.html#pagination), [Zurb Foundation](http://foundation.zurb.com/docs/components/pagination.html), [UIKit](http://getuikit.com/docs/pagination.html) and [Materialize](http://materializecss.com/).\r\n\r\nWith this package it is also very easy to [create custom pagination](#create-custom-pagination) HTML output.\r\n\r\n## Table of Contents\r\n* [Installation](#installation)\r\n* [Usage](#usage)\r\n* [Usage - Recommended Way](#usage---recommended-way)\r\n* [Simple Pagination](#simple-pagination)\r\n* [Additional Wrappers](#additional-wrappers)\r\n* [Appending To Pagination Links](#appending-to-pagination-links)\r\n* [Create Custom Pagination](#create-custom-pagination)\r\n* [License](#license)\r\n\r\n\r\n## Installation\r\n\r\nTo install `landish/pagination` package, you have to run the following command in your Terminal, or Comand Promt:\r\n\r\n```\r\ncomposer require landish/pagination\r\n```\r\n\r\nOr manually add the following lines in to your `composer.json` file:\r\n\r\n```json\r\n\"require\": {\r\n    \"landish/pagination\": \"~1.0\"\r\n}\r\n```\r\n\r\nand run the `composer update` or `composer install` command.\r\n\r\n## Usage\r\n\r\nAdd following lines of code in your `*.blade.php` file, where you want to dispay the pagination.\r\n\r\nFor [Semantic UI](http://semantic-ui.com/):\r\n\r\n```php\r\n{!! (new Landish\\Pagination\\SemanticUI($items))->render() !!}\r\n// or add \"\\Simple\" in namespace for \"Simple Pagination\"\r\n{!! (new Landish\\Pagination\\Simple\\SemanticUI($items))->render() !!}\r\n```\r\n\r\nFor [Zurb Foundation](http://foundation.zurb.com/):\r\n\r\n```php\r\n{!! (new Landish\\Pagination\\ZurbFoundation($items))->render() !!}\r\n// or add \"\\Simple\" in namespace for \"Simple Pagination\"\r\n{!! (new Landish\\Pagination\\Simple\\ZurbFoundation($items))->render() !!}\r\n```\r\n\r\nFor [UIKit](http://getuikit.com/):\r\n\r\n```php\r\n{!! (new Landish\\Pagination\\UIKit($items))->render() !!}\r\n// or add \"\\Simple\" in namespace for \"Simple Pagination\"\r\n{!! (new Landish\\Pagination\\Simple\\UIKit($items))->render() !!}\r\n```\r\n\r\nFor [Materialize](http://materializecss.com/) (Contributed by [@arandilopez](https://github.com/arandilopez)):\r\n\r\n```php\r\n{!! (new Landish\\Pagination\\Materialize($items))->render() !!}\r\n// or add \"\\Simple\" in namespace for \"Simple Pagination\"\r\n{!! (new Landish\\Pagination\\Simple\\Materialize($items))->render() !!}\r\n```\r\n\r\n## Usage - Recommended Way\r\n\r\nIf you display pagination on several pages of your web application and have to write to the output code in several files, then this is, what I would recommend to do:\r\n\r\nJust create `Pagination.php` file in your `/app/` directory and paste the following code:\r\n\r\n> **Note:** This example is suitable for you, if you haven't change the [Laravel Application Namespace](http://laravel.com/docs/5.0/structure#namespacing-your-application), otherwise just use your custom namespace instead of `App`.\r\n\r\n```php\r\n<?php namespace App;\r\n\r\nuse Landish\\Pagination\\SemanticUI;\r\n\r\n// Uncomment bellow line, if you like to use \"Simple Pagination\"\r\n// use Landish\\Pagination\\Simple\\SemanticUI;\r\n\r\nclass Pagination extends SemanticUI {\r\n\r\n}\r\n```\r\n\r\nIn that case, you only have to add the following code in your blade template files:\r\n\r\n```php\r\n{!! (new App\\Pagination($items))->render() !!}\r\n```\r\n\r\nAnd in future, if you decide to override the output of pagination elements, it will be much more easier to change in `app/Pagination.php` file, rather then in several blade template files.\r\n\r\n## Simple Pagination\r\n\r\n[Laravel](http://laravel.com/docs/5.0/pagination) gives you ability to create \"Simple Pagination\", which will have only `Previous` and `Next` buttons, something like [Bootstrap](http://getbootstrap.com/components/#pagination-pager) has. \r\n\r\nThe `landish/pagination` package supports this kind of pagination for [Semantic UI](http://semantic-ui.com/collections/menu.html#pagination), [Zurb Foundation](http://foundation.zurb.com/docs/components/pagination.html) and [UIKit](http://getuikit.com/docs/pagination.html).\r\n\r\nIn order to use, first call the [`simplePaginate()`](http://laravel.com/api/5.0/Illuminate/Database/Eloquent/Builder.html#method_simplePaginate) method on Eloquent Model.\r\n\r\n```php\r\n$items = User::where('votes', '>', 100)->simplePaginate(15);\r\n```\r\n\r\nAnd after that, add the `\\Simple` suffix in namespace, when displaying the pagination output. Something like this:\r\n\r\n```php\r\n{!! (new Landish\\Pagination\\Simple\\ZurbFoundation($items))->render() !!}\r\n```\r\n\r\n## Additional Wrappers\r\n\r\nIf you need to add additional wrappers to your pagination output, which will be displayed only if items have pages, then you can do it like this:\r\n\r\n```php\r\n@if($items->hasPages())\r\n\t<div class=\"pagination-wrapper\">\r\n    \t<div class=\"pagination-wrapper-inner\">\r\n        \t{!! (new App\\Pagination($items))->render() !!}\r\n        </div>\r\n\t</div>\r\n@endif\r\n```\r\n\r\nOf course, you are free to change the `.pagination-wrapper` and `.pagination-wrapper-inner` CSS classes and the HTML.\r\n\r\n## Appending To Pagination Links\r\n\r\n[Appending to pagination links](http://laravel.com/docs/5.0/pagination#appending-to-pagination-links) gives you ability to add extra query strings to your pagination links.\r\n\r\nWith this package you can do it with following lines of code:\r\n\r\n```php\r\n{!! $items->appends(['key' => 'value'])->render(new App\\Pagination($items))  !!}\r\n```\r\n\r\n## Create Custom Pagination\r\n\r\nCreating custom pagination or extending `landish/pagination` package is very easy. \r\n\r\n[`Landish\\Pagination\\PaginationHTML`](https://github.com/Landish/Pagination/blob/master/src/PaginationHTML.php) class contains the following properties:\r\n\r\n```php\r\n<?php namespace Landish\\Pagination;\r\n\r\nclass PaginationHTML {\r\n\r\n    /**\r\n     * Pagination wrapper HTML.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $paginationWrapper = '<ul class=\"pagination\">%s %s %s</ul>';\r\n\r\n    /**\r\n     * Available page wrapper HTML.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $availablePageWrapper = '<li><a href=\"%s\">%s</a></li>';\r\n\r\n    /**\r\n     * Get active page wrapper HTML.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $activePageWrapper = '<li class=\"active\"><span>%s</span></li>';\r\n\r\n    /**\r\n     * Get disabled page wrapper HTML.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $disabledPageWrapper = '<li class=\"disabled\"><span>%s</span></li>';\r\n\r\n    /**\r\n     * Previous button text.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $previousButtonText = '&laquo;';\r\n\r\n    /**\r\n     * Next button text.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $nextButtonText = '&raquo;';\r\n\r\n    /***\r\n     * \"Dots\" text.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $dotsText = '...';\r\n    \r\n    ...\r\n    \r\n    }\r\n```\r\n\r\nSimply extend the `Landish\\Pagination\\Pagination` class in your `app/pagination.php` file, just like I [recommended](#usage---recommended-way) above and overwrite these properties:\r\n\r\n```php\r\n<?php namespace App;\r\n\r\nuse Landish\\Pagination\\Pagination as BasePagination;\r\n\r\nclass Pagination extends BasePagination {\r\n\t\r\n\t/**\r\n     * Pagination wrapper HTML.\r\n     *\r\n     * @var string\r\n     */\r\n\tprotected $paginationWrapper = '<ol class=\"pagination-extended-css-class\">%s %s %s</ol>';\r\n\t\r\n\t...\r\n}\r\n```\r\n\r\nAfter that, just simply place the following code in your blade template file.\r\n\r\n```php\r\n{!! (new App\\Pagination($items))->render() !!}\r\n```\r\n\r\n## License\r\n\r\nThe Landish/Pagination package is open-sourced software licensed under the [MIT license](http://opensource.org/licenses/MIT)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}